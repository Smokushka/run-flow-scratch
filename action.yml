name: Run Scratch Org Flow
description: Execute a named CumulusCI flow
inputs:
  cumulusci-version:
    description: version of CumulusCI to install
    required: false
  sfdx-version:
    description: version of SFDX to install
    required: false
  dev-hub-auth-url:
    description: SFDX auth URL for the Dev Hub
    required: true
  org-name:
    description: Name of the scratch org or persistent org config to use
    required: true
  flow-name:
    description: Name of the Cumulus flow to execute
    required: true
  commit-status-name:
    description: Name of an optional extra commit status to set from build results
    required: false
    default: ""
  commit-status-regex:
    description: Regex to apply to flow log to locate commit status value
    required: false
    default: ""
  commit-status-description-prefix:
    description: Value to prefix before regex result in commit status value
    required: false
    default: ""
outputs:
  org-url:
    description: URL to access the Salesforce org
    value: ${{ steps.extract-org-url.outputs.org-url }}
runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
    
    - name: Set Up CumulusCI
      uses: cumulus-actions/setup-cumulus@v1
      with:
        cumulusci-version: ${{ inputs.cumulusci-version }}
        sfdx-version: ${{ inputs.sfdx-version }}
    
    - name: Authorize Dev Hub
      uses: cumulus-actions/authorize-org@v1
      with:
        auth-url: ${{ inputs.dev-hub-auth-url }}
        org-name: dev-hub
        dev-hub: true
    
    - name: Run Flow
      uses: cumulus-actions/run-flow@v1
      with:
        org-name: ${{ inputs.org-name }}
        flow-name: ${{ inputs.flow-name }}
    
    - name: Set Commit Status
      if: ${{ inputs.commit-status-regex != '' && inputs.commit-status-name != '' }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        STATUS=$(cat cumulusci-flow.log | grep -o '${{ inputs.commit-status-regex }}')
        gh api \
          --method POST \
          -H "Accept: application/vnd.github.v3+json" \
          "/repos/${{ github.repository }}/statuses/${{ github.sha }}" \
          -f state="success" \
          -f description="${{ inputs.commit-status-description-prefix }}$STATUS" \
          -f context="${{ inputs.commit-status-name }}"
    
    - name: Get Org URL
      id: extract-org-url
      shell: bash
      run: |
        echo "::group::Org Browser URL"
        
        # Run the cci command and save output to a file
        cci org browser ${{ inputs.org-name }} --url-only | tee org-url-output.log
        
        # Extract the URL using grep
        ORG_URL=$(cat org-url-output.log | grep -o 'https://.*salesforce.com[^ ]*')
        
        # Create a summary with debugging information if URL is empty
        if [ -z "$ORG_URL" ]; then
          echo "## ⚠️ Could not extract Salesforce org URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Raw output from cci command:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat org-url-output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "org-url=error" >> $GITHUB_OUTPUT
        else
          # Set the URL as an output variable
          echo "org-url=$ORG_URL" >> $GITHUB_OUTPUT
          
          # Create a clickable link in the GitHub Actions UI
          echo "## 🔗 Salesforce Org URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Click the link below to open the Salesforce org:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Open Salesforce Org]($ORG_URL)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "::endgroup::"
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.16/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.16/x64/lib
          CUMULUSCI_SERVICE_github: ${{ env.CUMULUSCI_SERVICE_github }}
